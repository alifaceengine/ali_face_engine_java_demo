/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import com.alibaba.cloud.faceengine.Error;
import com.alibaba.cloud.faceengine.*;

public class ToolsDemo {
    private static int RunMode = Mode.TERMINAL;

    public static void main(String[] args) {
        //step 1: authorize or enable debug
        FaceEngine.enableDebug(false);
        System.out.println("VENDOR_KEY : " + Utils.VENDOR_KEY);
        int error = FaceEngine.authorize(Utils.VENDOR_KEY);
        if (error != Error.OK) {
            System.out.println("authorize error : " + error);
            return;
        } else {
            System.out.println("authorize OK");
        }

        rgb888ToBmp();
        rgb888ToJpeg();
        compareFeatures();
    }

    private static void rgb888ToJpeg() {
        byte[] image = Utils.loadFile("/Users/junyuan.hjy/Downloads/aaa.yuv");
        byte[] jpeg = Codec.rgb888ToJpeg(image, 1280, 720, 90);
        System.out.println("jpeg: " + jpeg.length);

        Utils.saveFile(jpeg, "data.jpeg");
    }

    private static void rgb888ToBmp() {
        byte[] image = Utils.loadFile("/Users/junyuan.hjy/Downloads/aaa.yuv");
        byte[] bmp = Codec.rgb888ToBmp(image, 1280, 720);
        System.out.println("bmp: " + bmp.length);

        Utils.saveFile(bmp, "datadddd.bmp");
    }

    private static void compareFeatures() {
        compareSameFeatures();
        compareDifferentFeatures();
    }

    private static void compareSameFeatures() {
        System.out.println("compareSameFeatures begin");

        FaceRegister faceRegister = FaceRegister.createInstance();
        if (faceRegister == null) {
            System.out.println("FaceRegister.createInstance error");
            return;
        }

        FaceDetect faceDetect = FaceDetect.createInstance(Mode.TERMINAL);
        if (faceDetect == null) {
            System.out.println("FaceDetect.createInstance error");
            return;
        }

        byte[] imageData1 = Utils.loadFile(Utils.PICTURE_ROOT + "liudehua_feature1.bmp");
        Image image1 = new Image();
        image1.data = imageData1;
        image1.format = ImageFormat.COMPRESSED;

        byte[] imageData2 = Utils.loadFile(Utils.PICTURE_ROOT + "liudehua_feature2.bmp");
        Image image2 = new Image();
        image2.data = imageData2;
        image2.format = ImageFormat.COMPRESSED;

        Face[] faces1 = faceDetect.detectPicture(image1);
        Face[] faces2 = faceDetect.detectPicture(image2);

        String featureStr1 = faceRegister.extractFeature(image1, faces1[0], ModelType.MODEL_3K);
        if (featureStr1 == null) {
            throw new RuntimeException("extractFeature image1 error");
        }

        String featureStr2 = faceRegister.extractFeature(image2, faces2[0], ModelType.MODEL_3K);
        if (featureStr2 == null) {
            throw new RuntimeException("extractFeature image2 error");
        }

        float similarity = Tools.compareFeatures(featureStr1, featureStr2);
        System.out.println("compareSameFeatures similarity = " + similarity);
        FaceRegister.deleteInstance(faceRegister);
        FaceDetect.deleteInstance(faceDetect);
        System.out.println("compareSameFeatures end\n\n======================");
    }

    private static void compareDifferentFeatures() {
        System.out.println("compareDifferentFeatures begin");

        FaceRegister faceRegister = FaceRegister.createInstance();
        if (faceRegister == null) {
            System.out.println("FaceRegister.createInstance error");
            return;
        }

        FaceDetect faceDetect = FaceDetect.createInstance(Mode.TERMINAL);
        if (faceDetect == null) {
            System.out.println("FaceDetect.createInstance error");
            return;
        }

        byte[] imageData1 = Utils.loadFile(Utils.PICTURE_ROOT + "zhangxueyou_feature1.bmp");
        Image image1 = new Image();
        image1.data = imageData1;
        image1.format = ImageFormat.COMPRESSED;

        byte[] imageData2 = Utils.loadFile(Utils.PICTURE_ROOT + "liudehua_feature2.bmp");
        Image image2 = new Image();
        image2.data = imageData2;
        image2.format = ImageFormat.COMPRESSED;

        Face[] faces1 = faceDetect.detectPicture(image1);
        Face[] faces2 = faceDetect.detectPicture(image2);

        String featureStr1 = faceRegister.extractFeature(image1, faces1[0], ModelType.MODEL_3K);
        if (featureStr1 == null) {
            throw new RuntimeException("extractFeature image1 error");
        }

        String featureStr2 = faceRegister.extractFeature(image2, faces2[0], ModelType.MODEL_3K);
        if (featureStr2 == null) {
            throw new RuntimeException("extractFeature image2 error");
        }

        float similarity = Tools.compareFeatures(featureStr1, featureStr2);
        System.out.println("compareDifferentFeatures similarity = " + similarity);
        FaceRegister.deleteInstance(faceRegister);
        FaceDetect.deleteInstance(faceDetect);
        System.out.println("compareDifferentFeatures end\n\n======================");
    }
}
